name: Build and Deploy Docker Images
on:
  push:
    branches: [ "main", "development" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          load: true
          tags: visarch-client:latest
          build-args: |
            NODE_ENV=production

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: ./server/api
          file: ./server/api/Dockerfile
          load: true
          tags: visarch-api:latest

      - name: Build WebSocket image
        uses: docker/build-push-action@v5
        with:
          context: ./server/websocket
          file: ./server/websocket/Dockerfile
          load: true
          tags: visarch-websocket:latest

      - name: Save images as tar files
        run: |
          docker save -o client.tar visarch-client:latest
          docker save -o api.tar visarch-api:latest
          docker save -o websocket.tar visarch-websocket:latest

      - name: Upload Docker image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            client.tar
            api.tar
            websocket.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Set up SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} > ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "APP_URL=${{ secrets.PRODUCTION_HOST }}" > .env
          echo "GOOGLE_ID=${{ secrets.GOOGLE_ID }}" >> .env
          echo "GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}" >> .env
          echo "GITHUB_ID=${{ secrets.CLIENT_ID_GITHUB }}" >> .env
          echo "GITHUB_SECRET=${{ secrets.CLIENT_SECRET_GITHUB }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Send images, compose file, and .env to server
        run: |
          scp client.tar api.tar websocket.tar ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USER }}
          scp docker-compose.prod.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USER }}
          scp .env ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USER }}

      - name: Deploy to production
        run: |
          ssh -T ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            docker load -i client.tar
            docker load -i api.tar
            docker load -i websocket.tar
            docker compose -f docker-compose.prod.yml up -d --force-recreate
          ENDSSH

      - name: Clean up
        run: |
          ssh -T ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            rm client.tar api.tar websocket.tar
            rm docker-compose.prod.yml .env
          ENDSSH